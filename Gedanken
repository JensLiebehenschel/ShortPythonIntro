Ziel
----
Python Kurz-Einführung, so dass die Programme im Skript und alle anderen Beispiel-Programme komplett verstanden werden können.
Beispiele sollen - wenn einfach möglich - direkt in der Einführung ausprobiert werden können.
Intensives Durcharbeiten soll in 1-2 Stunden möglich sein.

Form
----
Jupyter-Book (https://jupyterbook.org/en/stable/intro.html)
Beispiel: https://gramschs.github.io/book_matlab/intro.html
Sprache: Deutsch (Begründung: 2. Semester, geringere Hürde für Studierende, Skript ist Deutsch)
- Jedoch im Code - sofern überhaupt zutreffenend - nur englische Fachterminologie (Bsp.: Stack statt Stapel)

Offene Punkte:
Gibt es einen Weg ohne Software-Installation (trotzdem einfache Beispiele ausprobieren)?
- Wie sieht es mit der in https://www.w3schools.com/python/ eingebetteten Umgebung aus? Rechtliches?
Alles im Interpreter im interaktiven Modus?
OER - Rahmenbedingungen, was ist zu beachten? Prof. Gramsch ansprechen
- https://www.hessenhub.de/oer-material/checkliste-oer/


Inhalte
-------
Wenige Zeilen Motivation für Python
- Ausführbarer Pseudocode (Siehe auch Kapitel 4.2 im Skript)
- Viele Bibliotheken
- Sprache für schnelles Prototyping, KI

Wie nutzen wir Python?
- "Not very pythonic" - Code soll gut lesbar sein, ohne tief in spezielle Python-Syntax einzutauchen
- Listen und Operationen verbergen fast alles für AlgDat Relevante (z.B. sort)


Python Einführung - benötigte Konstrukte zum Verständnis der AlgDat-Programme 
- Kommentare im Code - eventuell auch implizit mit print()?
- Ausgabe (Eingabe vermutlich nicht benötigt)
- Datentypen ("dynamic typing" erwähnen)
  - Zahlen
- Grundrechenarten (auch //, % und **)
- Wenige math. Funktionen: sqrt, log (und hier auch import erläutern)
- (random) - ist nicht "Basic"
- Variablen
- Zuweisung
  - a = b
  - a,b = b,a ("parallele" mehrfach-Zuweisung, hier: swap)
- Vergleichsoperatoren
- Logische Verknüpfungen and, or, not
- Verzweigungen: if
- Schleifen: while
- range
- Schleifen:
  - for (range)
- Datentypen: 
  - Strings
  - Listen
    - Definieren, initialisieren
    - len
    - slicing ([a:b], [a:], [:b])
    - append
- Schleifen:
  - for (element in Liste)
- Funktionen und return
  - Rekursion

Offen: Gibt es große Probleme bei Beginn mit Python mit
- range
- Listen
Doch eher am Anfang behandeln - vermutlich nicht

Offen: Klassen (erst mal) weglassen, auch wenn für Bäume benötigt


Beispiele
---------
Rahmenbedingungen
- mit Lösungen (erst versteckt, dann aufklappen)
- Alle interaktiv im Interpreter, falls einfach möglich, im Dokument wäre schön
- Es ist auch möglich, eine Umgebung für die Beispiele zu verlinken wie https://www.programiz.com/python-programming/online-compiler/
  - Dazu müssen Rechte geklärt werden
- Mögliche Alternative falls genannter Online Interpreter nicht verwendet werden kann https://www.pythonanywhere.com/

Und jetzt die Beispiele
- Hello World
- Python als Taschenrechner (mit beliebiger Genauigkeit)
- print(a-((a//b)*b+a%b))
- ...



